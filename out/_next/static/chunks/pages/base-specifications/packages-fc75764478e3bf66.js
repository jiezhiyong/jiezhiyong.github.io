(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[812],{2035:function(e,n,c){(window.__NEXT_P=window.__NEXT_P||[]).push(["/base-specifications/packages",function(){return c(1212)}])},1212:function(e,n,c){"use strict";c.r(n),c.d(n,{__toc:function(){return d}});var s=c(2676),i=c(1662),t=c(5056);let d=[{depth:2,value:"避免混用不同的包管理工具",id:"避免混用不同的包管理工具"},{depth:2,value:"及时更新依赖",id:"及时更新依赖"},{depth:2,value:"版本锁定机制",id:"版本锁定机制"}];function _createMdxContent(e){let n=Object.assign({h1:"h1",p:"p",code:"code",h2:"h2"},(0,t.a)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{children:"包管理工具"}),"\n",(0,s.jsxs)(n.p,{children:["为提高开发效率和协作一致性，建议在项目中统一使用 ",(0,s.jsx)(n.code,{children:"pnpm"})," 来管理依赖。\n并遵循以下注意事项，团队可以更好地协同工作，确保项目的依赖管理得到有效控制，并提高开发效率和代码质量。"]}),"\n",(0,s.jsx)(n.h2,{id:"避免混用不同的包管理工具",children:"避免混用不同的包管理工具"}),"\n",(0,s.jsxs)(n.p,{children:["如果不一致将出现一个项目中同时存在 ",(0,s.jsx)(n.code,{children:"packages.json.lock"}),"、",(0,s.jsx)(n.code,{children:"yarn.lock"}),"、",(0,s.jsx)(n.code,{children:"pnpm-lock.yaml"}),"，从而导致依赖版本与预期不符，出现构建的不可预测性。"]}),"\n",(0,s.jsx)(n.h2,{id:"及时更新依赖",children:"及时更新依赖"}),"\n",(0,s.jsx)(n.p,{children:"每次从 Master 拉取新分支后，要注意及时更新依赖。"}),"\n",(0,s.jsx)(n.h2,{id:"版本锁定机制",children:"版本锁定机制"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"pnpm"})," 通过生成 ",(0,s.jsx)(n.code,{children:"pnpm-lock.yaml"})," 文件来锁定项目的依赖版本。这个文件记录了每个依赖包的确切版本信息，以确保在不同环境中的一致性。提交代码时请将 ",(0,s.jsx)(n.code,{children:"pnpm-lock.yaml"})," 文件一同提交，以确保团队中的每个人都使用相同的依赖版本。"]})]})}n.default=(0,i.j)({MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.a)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(_createMdxContent,{...e})}):_createMdxContent(e)},pageOpts:{filePath:"pages/base-specifications/packages.mdx",route:"/base-specifications/packages",title:"包管理工具",headings:d},pageNextRoute:"/base-specifications/packages"})}},function(e){e.O(0,[662,774,888,179],function(){return e(e.s=2035)}),_N_E=e.O()}]);